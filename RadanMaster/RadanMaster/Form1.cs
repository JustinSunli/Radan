using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraBars.Ribbon;
using System.Data.Entity;
using RadanMaster.Models;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Columns;

using VaultItemProcessor;

using RadanInterface2;
using RadProject;
using System.IO;
using System.Xml.Serialization;
using System.Text.RegularExpressions;

namespace RadanMaster
{

    public partial class Form1 : RibbonForm
    {
        RadanMaster.DAL.RadanMasterContext dbContext { get; set; }
        string radanProjectName { get; set; }
        RadanProject rPrj { get; set; }
        string symFolder { get; set; }

        public Form1()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            dbContext = new DAL.RadanMasterContext();
            radanProjectName = (string) AppSettings.AppSettings.Get("RadanProjectPathAndFile");
            barEditRadanProjectBrowse.EditValue = radanProjectName;
            symFolder = (string)AppSettings.AppSettings.Get("SymFilePath");
            //rPrj = rPrj.LoadData(radanProjectName);

            // This line of code is generated by Data Source Configuration Wizard
            dbContext.OrderItems.Load();
            dbContext.Parts.Load();
            dbContext.Orders.Load();

            // This line of code is generated by Data Source Configuration Wizard
            orderItemsBindingSource.DataSource = dbContext.OrderItems.Local.ToBindingList();
        }

        private void importXmlFile(string fileName)
        {
            DailyScheduleAggregate dSchedule = new DailyScheduleAggregate(fileName);
            dSchedule.LoadFromFile();

            DirectoryInfo di = new DirectoryInfo(fileName);
            string batchName = di.Parent.Name;
            string schedName = di.Parent.Name;
            byte[] thumbnailByteArray = null;

            RadanInterface radanInterface = new RadanInterface();

            foreach (AggregateLineItem lineItem in dSchedule.AggregateLineItemList)
            {
                bool isBatch = batchName.ToUpper().Contains("BATCH");

                if (lineItem.Operations == "Laser")
                {
                    if ((isBatch && lineItem.IsStock == true) || (!isBatch && lineItem.IsStock == false))
                    {

                        string symName = symFolder + lineItem.Number + ".sym";
                        if (System.IO.File.Exists(symName))
                        {
                            char[] thumbnailCharArray = radanInterface.GetThumbnailDataFromSym(symName);
                            thumbnailByteArray = Convert.FromBase64CharArray(thumbnailCharArray, 0, thumbnailCharArray.Length);
                        }

                        Part newPart = new Part();

                        newPart = dbContext.Parts.Where(p => p.FileName == lineItem.Number).FirstOrDefault();
                        if (newPart == null)    // create a new part if we don't have it in the list
                        {
                            newPart = new Part();
                            newPart.FileName = lineItem.Number;
                            newPart.Description = lineItem.ItemDescription;
                            string modifiedThickness = lineItem.MaterialThickness.Substring(0, lineItem.MaterialThickness.LastIndexOf(" "));
                            newPart.Thickness = double.Parse(modifiedThickness);
                            newPart.Material = lineItem.Material;
                            newPart.Thumbnail = thumbnailByteArray;


                            dbContext.Parts.Add(newPart);
                            dbContext.SaveChanges();
                        }

                        foreach (OrderData oData in lineItem.AssociatedOrders)
                        {
                            Order searchOrder = new Order();
                            if (isBatch)
                                searchOrder = dbContext.Orders.Where(o => o.BatchName == batchName).FirstOrDefault();
                            else
                                searchOrder = dbContext.Orders.Where(o => o.OrderNumber == oData.OrderNumber).FirstOrDefault();
                            if (searchOrder == null)    // create new order if it doesn't already exist
                            {
                                searchOrder = new Order();
                                if (isBatch)
                                {
                                    searchOrder.BatchName = batchName;
                                }
                                else
                                {
                                    searchOrder.OrderNumber = oData.OrderNumber;
                                    searchOrder.ScheduleName = schedName;
                                }
                                searchOrder.IsComplete = false;
                                searchOrder.DueDate = DateTime.Now;
                                searchOrder.EntryDate = DateTime.Now;
                                searchOrder.IsBatch = isBatch;
                                dbContext.Orders.Add(searchOrder);
                                dbContext.SaveChanges();
                            }

                            OrderItem searchOrderItem = new OrderItem();
                            if (isBatch)
                                searchOrderItem = dbContext.OrderItems.Where(o => o.Order.BatchName == batchName).Where(o => o.Part.FileName == lineItem.Number).FirstOrDefault();
                            else
                                searchOrderItem = dbContext.OrderItems.Where(o => o.Order.OrderNumber == oData.OrderNumber).Where(o => o.Part.FileName == lineItem.Number).FirstOrDefault();
                            if (searchOrderItem == null)   // create a new order item if no match is found with this part number and order number
                            {
                                searchOrderItem = new OrderItem();
                                searchOrderItem.Order = searchOrder;
                                searchOrderItem.Part = newPart;
                                searchOrderItem.QtyRequired = oData.OrderQty * oData.UnitQty;
                                searchOrderItem.QtyNested = 0;
                                searchOrderItem.IsComplete = false;

                                dbContext.OrderItems.Add(searchOrderItem);
                                dbContext.SaveChanges();

                            }
                            else       // adjust existing order item with new quantities if it already exists
                            {
                                searchOrderItem.QtyRequired += oData.OrderQty * oData.UnitQty;
                                dbContext.SaveChanges();
                            }
                        }
                    }
                }
            }
            dbContext.SaveChanges();
        }

        private bool masterItemToRadanPart(OrderItem oItem)
        {
            try
            {
                rPrj = new RadanProject();
                rPrj = rPrj.LoadData(radanProjectName);
                string symName = symFolder + oItem.Part.FileName + ".sym";

                if (rPrj.Parts != null)
                {
                    RadanPart rPart = new RadanPart();
                    bool matchFound = false;
                    for (int i = 0; i < rPrj.Parts.Count(); i++)
                    {
                        rPart = rPrj.Parts.Part[i];
                        if (rPart.Symbol == symName && rPart.Bin == oItem.ID.ToString())
                        {
                            matchFound = true;
                            break;
                        }
                    }

                    if (matchFound)
                    {
                        MessageBox.Show(Path.GetFileName(symName) + " already exists in this radan projecs, it will not be added.");
                    }
                    else
                    {
                        //create new part in project
                        rPart = new RadanPart();
                        rPart.Symbol = symName;
                        rPart.Number = oItem.QtyRequired - oItem.QtyNested;
                        rPart.Made = 0;
                        rPart.ThickUnits = "in";
                        rPart.Thickness = oItem.Part.Thickness;
                        rPart.Material = oItem.Part.Material;
                        rPart.Bin = oItem.ID.ToString();


                        rPrj.AddPart(rPart);
                        rPrj.SaveData(radanProjectName);

                        oItem.IsInProject = true;
                        dbContext.SaveChanges();
                    }

                }
                

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }

        }

        private bool SyncRadanPartToMasterItem(RadanPart radPart)
        {
            try
            {
                string symName = Path.GetFileNameWithoutExtension(radPart.Symbol);
                int binNumber = int.Parse(radPart.Bin);

                List<OrderItem> masterItemList = dbContext.OrderItems.Where(i => i.Part.FileName == symName).Where(i => i.ID == binNumber).ToList();

                if (masterItemList.Count > 0)
                {

                    if (masterItemList[0].QtyRequired == radPart.Number)
                        masterItemList[0].QtyNested = radPart.Made;
                    if(masterItemList[0].QtyRequired == radPart.Number + radPart.Made)
                        masterItemList[0].QtyNested -= (radPart.Number + radPart.Made);
                }


                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        private bool RetrieveSelectedRadanPartToMasterList()
        {
            try
            {
                rPrj = new RadanProject();
                rPrj = rPrj.LoadData(radanProjectName);

                int[] rows = gridView1.GetSelectedRows();

                foreach(int i in rows)
                {
                    OrderItem item = (OrderItem) gridView1.GetRow(i);
                    RadanPart rPart = GetPartFromRadanProject(rPrj, item.Part.FileName, item.ID);
                    if (rPart != null)
                    {
                        //item.QtyRequired -= rPart.Made;
                        item.QtyNested += rPart.Made;
                        item.IsInProject = false;
                        rPrj.Parts.Part.Remove(rPart);
                        rPrj.SaveData(radanProjectName);
                    }
                }

                rPrj.SaveData(radanProjectName);
                dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        private RadanPart GetPartFromRadanProject(RadanProject prj, string partName, int ID)
        {
            

            RadanPart rPart = new RadanPart();

            for (int i = 0; i < prj.Parts.Count(); i++)
            {
                rPart = prj.Parts.Part[i];
                if ((rPart.Symbol == (symFolder + partName + ".sym")) && (rPart.Bin == ID.ToString()))
                    return rPart;
            }

            return null;
        }

        #region gridView1 Event Handlers
        private void gridView1_RowUpdated(object sender, RowObjectEventArgs e)
        {
            dbContext.SaveChanges();
        }

        private void gridView1_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            dbContext.SaveChanges();
        }

        private void gridView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                GridView view = sender as GridView;
                int numRows = view.SelectedRowsCount;
                if (MessageBox.Show("Delete " + numRows + " row(s)?", "Confirmation", MessageBoxButtons.YesNo) !=
                  DialogResult.Yes)
                    return;
               
                view.DeleteSelectedRows();
            }
        }

        private void barButtonSendSelectionToRadan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            for (int i = 0; i < gridView1.DataRowCount; i++)
            {
                if (gridView1.IsRowSelected(i))
                {

                    string partName = gridView1.GetRowCellValue(i, "Part.FileName").ToString();
                    string orderNumber = gridView1.GetRowCellValue(i, "Order.OrderNumber").ToString();

                    OrderItem orderItem = dbContext.OrderItems.Where(oi => oi.Part.FileName == partName).Where(oi => oi.Order.OrderNumber == orderNumber).FirstOrDefault();
                    if (orderItem != null)
                        masterItemToRadanPart(orderItem);
                }
            }

            string path = barEditRadanProject.EditValue.ToString();
            rPrj.SaveData(path);

            gridView1.RefreshData();
        }

        private void barButtonRetrieveSelectionFromRadan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            RetrieveSelectedRadanPartToMasterList();

            gridView1.RefreshData();
        }

        private void barButtonItemAdd_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string addItemFileName = "";
            // Show the dialog and get result.
            openFileDialogImport.Filter = "sym files (*.sym) | *.sym";
            DialogResult result = openFileDialogAddItem.ShowDialog();
            if (result == DialogResult.OK) // Test result.
            {
                AddItemDialog.AddItem addItemDialog = new AddItemDialog.AddItem();
                DialogResult addItemResult = addItemDialog.ShowDialog();


                if (addItemResult == DialogResult.OK)
                {
                    addItemFileName = (openFileDialogAddItem.FileName);
                    RadanInterface radanInterface = new RadanInterface();
                    //radanInterface.Initialize();

                    string name = System.IO.Path.GetFileNameWithoutExtension(addItemFileName);
                    string description = radanInterface.GetDescriptionFromSym(addItemFileName);
                    string thicknessStr = radanInterface.GetThicknessFromSym(addItemFileName);
                    double thickness = double.Parse(thicknessStr);
                    string material = radanInterface.GetMaterialTypeFromSym(addItemFileName);
                    char[] thumbnailCharArray = radanInterface.GetThumbnailDataFromSym(addItemFileName);
                    byte[] thumbnailByteArray = Convert.FromBase64CharArray(thumbnailCharArray, 0, thumbnailCharArray.Length);


                    Part newPart = dbContext.Parts.Where(p => p.FileName == name).FirstOrDefault();
                    if (newPart == null)
                    {
                        newPart = new Part();
                        newPart.FileName = name;
                        newPart.Description = description;
                        newPart.Thickness = thickness;
                        newPart.Material = material;
                        newPart.Thumbnail = thumbnailByteArray;

                        dbContext.Parts.Add(newPart);
                        dbContext.SaveChanges();


                    }

                    Order newOrder = dbContext.Orders.Where(o => o.OrderNumber == AddItemDialog.AddItem.lastOrderNumber).FirstOrDefault();
                    if (newOrder == null)
                    {
                        newOrder = new Order();
                        newOrder.IsComplete = false;
                        newOrder.DueDate = DateTime.Now;
                        newOrder.EntryDate = DateTime.Now;
                        newOrder.OrderItems = new List<OrderItem>();
                        newOrder.OrderNumber = AddItemDialog.AddItem.lastOrderNumber;
                        newOrder.ScheduleName = AddItemDialog.AddItem.lastSchedName;
                        newOrder.BatchName = AddItemDialog.AddItem.lastBatchName;
                        newOrder.IsBatch = AddItemDialog.AddItem.isBatch;

                        dbContext.Orders.Add(newOrder);
                        dbContext.SaveChanges();

                    }

                    OrderItem newItem = dbContext.OrderItems.Where(oitem => oitem.Order.OrderNumber == AddItemDialog.AddItem.lastOrderNumber).Where(oitem => oitem.Part.FileName == name).FirstOrDefault();
                    if (newItem == null)
                    {
                        newItem = new OrderItem();
                        newItem.IsComplete = false;
                        newItem.Order = newOrder;
                        newItem.Part = newPart;
                        newItem.QtyRequired = int.Parse(AddItemDialog.AddItem.qty);
                        newItem.QtyNested = 0;

                        dbContext.OrderItems.Add(newItem);
                        dbContext.SaveChanges();
                    }
                    else
                    {
                        MessageBox.Show("This Order Item has already been entered. It will not be entered again");
                    }
                }
            }
        }

        private void barButtonItemImport_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string importFileName = "";
            // Show the dialog and get result.
            openFileDialogImport.Filter = "xml files (*.xml) | *.xml";
            DialogResult result = openFileDialogImport.ShowDialog();
            if (result == DialogResult.OK) // Test result.
            {
                importFileName = (openFileDialogImport.FileName);
                importXmlFile(importFileName);
            }
        }

        private void barButtonBrowseRadanProject_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            openFileDialogProject.Filter = "rpd files (*.rpd) | *.rpd";
            DialogResult result = openFileDialogProject.ShowDialog();
            if (result == DialogResult.OK) // Test result.
            {
                string path = openFileDialogProject.FileName;

                radanProjectName = openFileDialogProject.FileName;
                barEditRadanProjectBrowse.EditValue = radanProjectName;

                rPrj = rPrj.LoadData(path);
            }
        }

        private void barButtonUpdateFromRadan_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            rPrj = rPrj.LoadData(radanProjectName);
            List<RadanNest> nestList = rPrj.Nests.ToList();
            int nestsImported = 0;
            int nestsAlreadyInProject = 0;

            foreach (RadanNest nst in rPrj.Nests.ToList())
            {
                Nest searchNest = dbContext.Nests.Where(n => n.nestName == nst.FileName).FirstOrDefault();
                if (searchNest == null)
                {
                    Nest newNest = new Nest();
                    newNest.nestName = nst.FileName;
                    newNest.nestPath = System.IO.Path.GetDirectoryName(barEditRadanProject.EditValue.ToString());
                    dbContext.Nests.Add(newNest);
                    nestsImported++;
                }
                else
                {
                    nestsAlreadyInProject++;
                }
            }
            dbContext.SaveChanges();

            RadanPart rPart = new RadanPart();

            for (int i = 0; i < rPrj.Parts.Count(); i++)
            {
                rPart = rPrj.Parts.Part[i];
                SyncRadanPartToMasterItem(rPart);
            }

            //rPrj.SaveData(barEditRadanProjectBrowse.EditValue.ToString());
            dbContext.SaveChanges();
            gridView1.RefreshData();
        }

        private void barEditRadanProjectBrowse_EditValueChanged(object sender, EventArgs e)
        {
            AppSettings.AppSettings.Set("RadanProjectPathAndFile", barEditRadanProjectBrowse.EditValue);
        }

        #endregion

        
    }
}
