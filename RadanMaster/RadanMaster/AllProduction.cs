using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using System.IO;
using DevExpress.Utils;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraPdfViewer;
using RadanMaster.Models;
using DevExpress.XtraGrid.Views.Grid;

namespace RadanMaster
{
    public partial class AllProduction : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        RadanMaster.DAL.RadanMasterContext dbContext { get; set; }
        RefreshHelper helper;

        public AllProduction()
        {
            InitializeComponent();
            dbContext = new RadanMaster.DAL.RadanMasterContext();

            entityServerModeSource2.QueryableSource = from orderitem in dbContext.OrderItems
                                                      select new
                                                      {
                                                          orderitem.ID,
                                                          orderitem.QtyRequired,
                                                          orderitem.QtyNested,
                                                          orderitem.Part.CategoryName,
                                                          orderitem.Part.FileName,
                                                          orderitem.Part.Description,
                                                          orderitem.Part.IsStock,
                                                          orderitem.Part.Thickness,
                                                          orderitem.Order.OrderNumber,
                                                          orderitem.Part.StructuralCode,
                                                          orderitem.Part.Operations.FirstOrDefault().Name,
                                                          orderitem.Order.ScheduleName,
                                                          orderitem.Order.BatchName,
                                                          orderitem.Notes,
                                                          orderitem.Order.IsComplete,
                                                          orderitem.Order.IsBatch
                                                      };
            // load grid layout from file
            string SettingsFilePath = new FileInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)) + @"\RadanMaster\AllProductionGridLayout.xml";
            if (System.IO.File.Exists(SettingsFilePath))
            {
                gridControlAllProduction.ForceInitialize();
                gridControlAllProduction.MainView.RestoreLayoutFromXml(SettingsFilePath);
            }

            // load collapsed/expanded state of gridview
            helper = new RefreshHelper(gridViewAllProduction, "ID", "AllProductionGridExpansion.xml");
            helper.LoadViewInfo();
            // This line of code is generated by Data Source Configuration Wizard
            //entityServerModeSource2.QueryableSource = new RadanMaster.DAL.RadanMasterContext().OrderItems;
        }

        private void AllProduction_FormClosing(object sender, FormClosingEventArgs e)
        {
            string SettingsFilePath = new FileInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)) + @"\RadanMaster\AllProductionGridLayout.xml";
            gridControlAllProduction.MainView.SaveLayoutToXml(SettingsFilePath, OptionsLayoutBase.FullLayout);

            //save the expanded/contracted state of grouped rows
            helper.SaveViewInfo();
        }

        private void gridControlAllProduction_MouseMove(object sender, MouseEventArgs e)
        {
            GridHitInfo info = gridViewAllProduction.CalcHitInfo(e.Location);
            GridViewInfo viewInfo = gridViewAllProduction.GetViewInfo() as GridViewInfo;
            GridCellInfo cellInfo = viewInfo.GetGridCellInfo(info);

            if (cellInfo != null)
            {
                if (cellInfo.Column.Caption == "Name")
                {
                    int handle = cellInfo.RowHandle;

                    dynamic o = gridViewAllProduction.GetRow(handle);
                    int itemIndex = o.ID;
                    OrderItem item = dbContext.OrderItems.FirstOrDefault(it => it.ID == itemIndex);
                    if (item != null)
                    {
                        int partIndex = item.PartID;
                        Part prt = dbContext.Parts.FirstOrDefault(p => p.ID == partIndex);
                        if (prt.Files.Count > 0)
                        {
                            int fileIndex = prt.Files.FirstOrDefault().FileId;
                            Models.File file = dbContext.Files.FirstOrDefault(f => f.FileId == fileIndex);
                            Stream stream = new MemoryStream(file.Content);
                            pdfViewerAllProduction.LoadDocument(stream);
                            pdfViewerAllProduction.CurrentPageNumber = 1;
                            pdfViewerAllProduction.ZoomMode = PdfZoomMode.FitToVisible;

                            Point popupPoint = new Point(e.X + 5, e.Y + 5);
                            if (popupPoint.Y + popupContainerControlAllProduction.Height > gridControlAllProduction.Height)
                                popupPoint.Y = gridControlAllProduction.Height - popupContainerControlAllProduction.Height;
                            popupContainerControlAllProduction.Location = popupPoint;
                            popupContainerControlAllProduction.Show();
                        }
                        else
                        {
                            popupContainerControlAllProduction.Hide();
                        }
                    }
                }
                else
                {
                    popupContainerControlAllProduction.Hide();
                }

            }
            else
            {
                popupContainerControlAllProduction.Hide();
            }


        }

        private void gridControlAllProduction_KeyDown(object sender, KeyEventArgs e)
        {
            
        }

        private void gridViewAllProduction_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            dbContext.SaveChanges();
            entityServerModeSource2.Reload();
            gridViewAllProduction.RefreshData();
        }

        private void gridViewAllProduction_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            dbContext.SaveChanges();
            gridViewAllProduction.RefreshData();
        }

        private void gridViewAllProduction_KeyDown(object sender, KeyEventArgs e)
        {
            bool canDelete = true;
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                GridView view = sender as GridView;
                int numRows = view.SelectedRowsCount;
                if (MessageBox.Show("Delete " + numRows + " row(s)?", "Confirmation", MessageBoxButtons.YesNo) !=
                  DialogResult.Yes)
                    return;

                List<int> rowHandleList = view.GetSelectedRows().ToList();
                foreach (int rowHandle in rowHandleList)
                {
                    dynamic o = gridViewAllProduction.GetRow(rowHandle);
                    int itemIndex = o.ID;
                    OrderItem itemToDelete = dbContext.OrderItems.FirstOrDefault(it => it.ID == itemIndex);

                    if (itemToDelete.IsInProject == true)
                    {
                        MessageBox.Show("Cannot delete items that are currently in a Radan project.  Please change your selection and try again.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        canDelete = false;
                        break;
                    }
                }

                if (canDelete)
                {
                    view.DeleteSelectedRows();
                    dbContext.SaveChanges();
                }
            }
        }
    }
}